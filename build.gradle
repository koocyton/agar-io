buildscript {
	repositories {
		maven{ url 'http://maven.aliyun.com/nexus/content/groups/public/'}
		// maven { url 'https://repo.spring.io/libs-snapshot' }
	}
	dependencies {
		classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.3.0.RELEASE'
		classpath "io.spring.gradle:dependency-management-plugin:1.0.9.RELEASE"
	}
}

allprojects {
	group 'com.doopp.agar'
	version '1.0'

	apply plugin: 'java'
	apply plugin: 'application'
}

// 所有子项目的通用配置
subprojects {

	// JVM 版本号要求
	sourceCompatibility = 1.8
	targetCompatibility = 1.8

	// java编译的时候缺省状态下会因为中文字符而失败
	[compileJava,compileTestJava,javadoc]*.options*.encoding = 'UTF-8'

	ext {
		springVersion = '5.2.6.RELEASE'
		undertowVersion = '2.0.28.Final'
		jacksonVersion = '2.11.0'
		lombokVersion = '1.18.12'
		jedisVersion = '2.9.0'
		slf4jVersion = '1.7.30'
		springBootVersion = '2.3.0.RELEASE'
		springManagementVersion = '1.0.9.RELEASE'
		junitVersion = '4.13'
	}

	repositories {
		// mavenLocal()
		// jcenter()
		// mavenCentral()
		maven{ url 'http://maven.aliyun.com/nexus/content/groups/public/'}
		// maven { url 'https://jitpack.io' }
	}

	dependencies {

		// JSON
		// compile 'com.google.code.gson:gson:2.8.2'
		compile "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
		compile "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
		compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"

		// Util
		compileOnly "org.projectlombok:lombok:${lombokVersion}"
		annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

		// Redis
		compile "redis.clients:jedis:${jedisVersion}"

		// slf4j
		// compile "org.slf4j:slf4j-api:${slf4jVersion}"
		// compile "org.slf4j:slf4j-log4j12:${slf4jVersion}"

		testCompile "junit:junit:${junitVersion}"
	}

	tasks.withType(JavaCompile) {
		options.encoding = "UTF-8"
	}

	task clear(type:Delete){
		delete 'build','target'
	}

	task release(type: Copy, dependsOn: [clear, jar]) {
	}
}

project(':spring-server') {

	dependencies {

		// spring core
		compile "org.springframework:spring-core:${springVersion}"
		compile "org.springframework:spring-aop:${springVersion}"
		compile "org.springframework:spring-context:${springVersion}"
		compile "org.springframework:spring-context-support:${springVersion}"
		compile "org.springframework:spring-beans:${springVersion}"
		compile "org.springframework:spring-web:${springVersion}"
		compile "org.springframework:spring-webmvc:${springVersion}"
		compile "org.springframework:spring-oxm:${springVersion}"
		compile "org.springframework:spring-expression:${springVersion}"
		compile "org.springframework:spring-tx:${springVersion}"
		// compile "org.springframework:spring-jdbc:${springVersion}"
		// compile "org.springframework:spring-test:${springVersion}"


		// undertow
		compile "io.undertow:undertow-core:${undertowVersion}"
		compile "io.undertow:undertow-servlet:${undertowVersion}"
		// compile "io.undertow:undertow-websockets-jsr:${undertowVersion}"

		// Redis
		compile 'org.springframework.data:spring-data-redis:1.8.6.RELEASE'

		// slf4j
		compile "org.slf4j:slf4j-api:${slf4jVersion}"
		compile "org.slf4j:slf4j-log4j12:${slf4jVersion}"
	}

	jar {
		manifest {
			attributes(
					"Manifest-Version": 1.0,
					"Main-Class": "com.doopp.agar.server.KTApplication",
					"Class-Path": "./",
					"Implementation-Title": "Gradle"
			)
		}
		from {
			configurations.compile.collect {
				it.isDirectory() ? it : zipTree(it)
			}
		}
	}
}

project(':reactor-server') {

	dependencies {
		compile 'com.doopp:reactor-guice:0.12.10'
		// Redis & Serializable
		compile 'com.esotericsoftware:kryo:4.0.2'

		// slf4j
		compile "org.slf4j:slf4j-api:${slf4jVersion}"
		compile "org.slf4j:slf4j-log4j12:${slf4jVersion}"
	}

	jar {
		manifest {
			attributes(
					"Manifest-Version": 1.0,
					"Main-Class": "com.doopp.agar.server.KTApplication",
					"Class-Path": "./",
					"Implementation-Title": "Gradle"
			)
		}
		from {
			configurations.compile.collect {
				it.isDirectory() ? it : zipTree(it)
			}
		}
	}
}

project(':boot-server') {
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'
	configurations {
		compileOnly {
			extendsFrom annotationProcessor
		}
	}
	dependencies {
		implementation "org.springframework.boot:spring-boot-starter-web"
		implementation "org.springframework.boot:spring-boot-starter-websocket"
		// compileOnly 'org.projectlombok:lombok'
		// annotationProcessor 'org.projectlombok:lombok'
		testImplementation('org.springframework.boot:spring-boot-starter-test') {
			exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
		}
	}
	test {
		useJUnitPlatform()
	}
}
